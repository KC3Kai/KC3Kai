// Paste result table of following TsunDB query with updated the event id:
/*
select distinct fleet#>>'{voice,0}' as voiceids, fleet#>>'{voice,1}' as voiceorders, fleet->>'ship' as ships from friendlyfleet where map like '59-%'
*/
const rawtbl = `
[144,160]	[1,0]	[547,146]
[144,160,160]	[1,0,0]	[547,146,419]
[144,160,160]	[1,2,0]	[591,556,557]
[144,244,160]	[1,2,0]	[146,547,419]
[144,244,160,160]	[1,2,0,0]	[547,146,240,419]
[148,154,154,160]	[1,2,3,0]	[639,719,887,399]
[148,154,154,160,160]	[1,2,3,0,0]	[639,719,887,399,959]
[149,160]	[1,0]	[706,708]
[149,160]	[1,0]	[893,394]
[151,148,160,160]	[1,2,0,0]	[626,703,725,260]
[151,158,160]	[1,2,0]	[626,700,729]
[151,159,160]	[1,2,0]	[705,906,893]
[151,160,148,160,160]	[1,2,3,0,0]	[626,948,703,725,497]
[153,160]	[1,0]	[487,647]
[154,158,158,160]	[1,2,3,0]	[699,729,700,541]
[154,158,158,160,160]	[1,2,3,0,0]	[699,729,700,464,541]
[154,160]	[1,0]	[264,142]
[154,160]	[1,0]	[699,541]
[154,258,160]	[1,2,0]	[699,729,476]
[154,260,160]	[1,2,0]	[264,142,729]
[155,160,160,160,160]	[1,2,3,0,0]	[723,360,734,628,726]
[156,148,160]	[1,2,0]	[725,703,260]
[156,154,154,160,160]	[1,2,3,0,0]	[640,887,719,647,627]
[156,154,154,160,160,160]	[1,2,3,0,0,0]	[640,887,719,607,647,627]
[156,156,160,160]	[1,2,0,0]	[668,557,558,656]
[156,160]	[1,0]	[726,628]
[156,160,160,160]	[1,2,0,0]	[668,557,558,656]
[158,148]	[1,2]	[497,961]
[158,151,160,160]	[1,2,0,0]	[541,883,363,476]
[158,154,158,160,160]	[1,2,3,0,0]	[411,319,194,327,564]
[158,158,158,160]	[1,2,3,0]	[192,193,464,567]
[158,158,158,160,160]	[1,2,3,0,0]	[949,977,976,363,476]
[158,158,158,160,160,160]	[1,2,3,0,0,0]	[949,977,976,363,387,476]
[158,158,160]	[1,2,0]	[200,407,665]
[158,158,160]	[1,2,0]	[729,700,464]
[158,158,160,160]	[1,2,0,0]	[729,700,464,567]
[158,160]	[1,0]	[729,700]
[158,160]	[1,2]	[411,412]
[158,160,154,160,160,160]	[1,2,3,0,0,0]	[411,412,319,194,327,328]
[158,160,158,160,160,160]	[1,2,3,0,0,0]	[411,412,555,319,327,328]
[158,160,160]	[1,2,0]	[541,363,476]
[158,160,160,160]	[1,2,0,0]	[411,194,327,564]
[158,256,160,160]	[1,2,3,0]	[916,668,557,558]
[158,256,160,160,160,160]	[1,2,0,0,3,0]	[916,668,557,558,360,726]
[158,258,258,160]	[1,2,3,0]	[200,700,729,464]
[159,150,156,160,160]	[1,2,3,0,0]	[948,543,557,558,680]
[159,153,159,160,160]	[1,2,3,0,0]	[264,487,647,627,961]
[159,153,159,160,160,160]	[1,2,3,0,0,0]	[264,487,647,627,656,961]
[159,153,160]	[1,2,0]	[264,487,647]
[159,153,160,160]	[1,2,0,0]	[264,487,647,627]
[159,155]	[1,2]	[969,724]
[159,155,160,160]	[1,2,0,0]	[630,488,948,626]
[159,156,160]	[1,2,0]	[948,557,558]
[159,158,160]	[1,2,0]	[948,407,665]
[159,158,160,160]	[1,2,0,0]	[948,665,407,703]
[159,159,251,160,160]	[1,2,3,0,0]	[364,733,705,906,893]
[159,159,251,160,160,160]	[1,2,3,0,0,0]	[364,733,705,906,893,394]
[159,160]	[1,0]	[647,627]
[159,160]	[1,2]	[591,954]
[159,160,160]	[1,2,0]	[591,954,556]
[159,160,160]	[1,2,0]	[734,726,628]
[159,160,160]	[1,2,0]	[969,970,967]
[159,160,160,160]	[1,2,0,0]	[734,726,628,689]
[159,160,160,160]	[1,2,0,0]	[969,970,967,372]
[159,160,160,160]	[1,2,3,0]	[591,954,556,557]
[159,160,160,160,160]	[1,2,3,0,0]	[591,954,556,558,557]
[159,160,259,160,160]	[1,2,3,0,0]	[969,970,967,372,724]
[159,244,160]	[1,2,0]	[734,628,726]
[159,251,160,160]	[1,2,0,0]	[364,705,906,893]
[160,150,160,160]	[1,2,0,0]	[229,543,680,578]
[160,150,249,160,160]	[1,2,3,0,0]	[229,543,706,680,578]
[160,154,160,160]	[1,2,3,0]	[142,264,986,987]
[160,154,160,160,160]	[1,2,3,0,0]	[142,264,986,987,959]
[160,158,160,160]	[1,2,0,0]	[543,407,695,578]
[160,158,160,160,160]	[1,2,3,0,0]	[543,407,695,680,578]
[160,160]	[1,0]	[328,327]
[160,160]	[1,0]	[363,476]
[160,160]	[1,0]	[543,578]
[160,160]	[1,0]	[569,686]
[160,160]	[1,0]	[628,689]
[160,160]	[1,2]	[118,119]
[160,160]	[1,2]	[419,235]
[160,160]	[1,2]	[557,558]
[160,160,160]	[1,0,0]	[543,695,680]
[160,160,160]	[1,2,0]	[118,119,706]
[160,160,160]	[1,2,0]	[543,695,578]
[160,160,160]	[1,2,0]	[553,554,235]
[160,160,160]	[1,2,0]	[557,558,656]
[160,160,160]	[1,2,0]	[569,543,686]
[160,160,160,160]	[1,2,0,0]	[118,119,708,706]
[160,160,160,160]	[1,2,0,0]	[360,734,628,726]
[160,160,160,160]	[1,2,0,0]	[397,734,628,726]
[160,160,160,160]	[1,2,0,0]	[557,558,656,961]
[160,160,160,160]	[1,2,3,0]	[553,554,235,419]
[160,160,160,160,160]	[1,2,3,0,0]	[553,554,235,419,706]
[160,160,244,160,160]	[1,2,3,0,0]	[397,734,628,689,726]
[160,160,248,160,160]	[1,0,2,3,0]	[118,725,703,948,626]
[160,160,249]	[1,0,2]	[229,680,706]
[160,244,160]	[1,2,0]	[360,628,726]
[160,249]	[1,2]	[119,706]
[160,254,160,160]	[1,2,0,0]	[119,314,708,706]
[244,150,160,160,160]	[1,2,3,0,0]	[586,543,695,680,706]
[244,156,160,160]	[1,2,0,0]	[586,557,556,558]
[244,156,160,160]	[1,2,0,0]	[586,557,558,703]
[244,160,160]	[1,2,0]	[586,695,680]
[248,155,160,160,160]	[1,2,0,0,0]	[697,659,723,726,628]
[248,160]	[1,0]	[703,260]
[255,158,160,160,160,148]	[1,2,0,0,0,3]	[663,501,557,558,656,961]
[255,160,160,160,148]	[1,2,0,0,3]	[663,557,558,656,961]
[256,160,160,160]	[1,2,0,0]	[928,734,628,726]
[256,160,244,160,160]	[1,2,3,0,0]	[928,734,628,689,726]
[258,150,160,160,160]	[1,2,3,0,0]	[464,543,578,695,407]
[258,150,160,160,160,160]	[1,2,3,0,0,0]	[464,543,578,695,407,680]
[258,158]	[1,2]	[665,407]
[258,158,158,160]	[1,2,3,0]	[193,200,700,419]
[258,160]	[1,0]	[665,407]
[258,160,160]	[1,0,0]	[464,700,193]
[258,160,160,160]	[1,0,0,0]	[464,700,729,193]
[258,160,160,160]	[1,0,0,2]	[665,407,703,948]
[258,258]	[1,2]	[700,729]
[258,258,160,160]	[1,2,0,0]	[193,729,700,464]
[258,258,160,160,160]	[1,2,0,0,0]	[193,729,700,464,567]
[259,160]	[1,0]	[906,893]
[260,148]	[1,2]	[412,961]
[260,156,160]	[1,2,0]	[954,557,558]
[260,156,160,160]	[1,2,0,0]	[954,557,558,656]
[260,160]	[1,0]	[558,557]
[260,160]	[1,0]	[986,987]
[260,160,160]	[1,2,0]	[558,556,557]
[260,160,160,160]	[1,2,0,0]	[954,558,557,556]
`


const ffv = rawtbl.split(/\n/).filter(s => !!s.trim())
	.map(ln => ln.trim().split(/\t/).map(a => JSON.parse(a)))
console.info('FF voice parsed records:', ffv.length)
//console.debug(ffv)


const voiceByShipId = {}
ffv.forEach(r => {
	r[0].forEach((voiceId, i) => {
		const voiceRecord = voiceByShipId[voiceId] || []
		if(!voiceRecord.length) voiceByShipId[voiceId] = voiceRecord
		const speakOrder = r[1][i], shipId = r[2][i] || -1
		if(speakOrder > 0 && !voiceRecord.includes(shipId)) voiceRecord.push(shipId)
	})
})
const distinctShip = new Set()
Object.keys(voiceByShipId).forEach(s => {
	voiceByShipId[s] = voiceByShipId[s].sort()
	voiceByShipId[s].forEach(id => distinctShip.add(id))
})
//console.debug(distinctShip)
console.info('FF voice-ship stats:', Object.keys(voiceByShipId).length,
	'voices from', distinctShip.size, 'ships:')
console.info(JSON.stringify(voiceByShipId))


// Update id list respectively
const voicesLookfor = [160, 260]
const previousFound = [118,119,142,194,229,235,328,360,363,397,412,419,543,553,554,556,557,558,569,578,628,695,726,734,948,954,970,986]
voicesLookfor.forEach(v => {
	console.info(`voice-${v} ${voiceByShipId[v].length} ships:`, voiceByShipId[v].join(','))
	console.info(`voice-${v} new ships:`, voiceByShipId[v].filter(id => !previousFound.includes(id)).join(','))
})


// To get available voice id list (to determine if 3xx exists?):
/*
select distinct voiceid from (
  select distinct (fleet#>>'{voice,0}')::jsonb as voiceids from friendlyfleet where map like '59-%'
) as t, jsonb_array_elements(t.voiceids) as voiceid order by voiceid
*/
